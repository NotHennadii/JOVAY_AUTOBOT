#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è Jovay Network Automation
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import sys
import random
import time # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç time –¥–ª—è print_banner

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    required_files = ['jovay_automation.py', 'config.py']

    for filename in required_files:
        if not os.path.exists(filename):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {filename}")
            return False

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    create_config_files()
    return True

def create_config_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    # private_keys.txt
    if not os.path.exists("private_keys.txt"):
        with open("private_keys.txt", 'w', encoding='utf-8') as f:
            f.write("# –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ—à–µ–ª—å–∫–æ–≤\n")
            f.write("# –ö–∞–∂–¥—ã–π –∫–ª—é—á —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n")
            f.write("# 0x1234567890abcdef...\n")

    # api_keys.txt
    if not os.path.exists("api_keys.txt"):
        with open("api_keys.txt", 'w', encoding='utf-8') as f:
            f.write("# API –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n")
            f.write("# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt\n")
            f.write("# 9d9d6aa530b64877be75a16288a7eadb\n")
            f.write("# 8c8c5bb420a53766ae64b17288a6dbea\n")

    # proxies.txt
    if not os.path.exists("proxies.txt"):
        with open("proxies.txt", 'w', encoding='utf-8') as f:
            f.write("# –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤\n")
            f.write("# ip:port:user:pass\n")
            f.write("# 192.168.1.1:8080\n")

    # proxy_assignments.txt
    if not os.path.exists("proxy_assignments.txt"):
        with open("proxy_assignments.txt", 'w', encoding='utf-8') as f:
            f.write("# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n")
            f.write("# 1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏, 0 = –±–µ–∑ –ø—Ä–æ–∫—Å–∏\n")
            f.write("# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt\n")
            f.write("# 1\n")
            f.write("# 0\n")

def load_wallets_info():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–∞—Ö"""
    try:
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
        with open("private_keys.txt", 'r', encoding='utf-8') as f:
            keys = [line.strip() for line in f if line.strip() and not line.startswith('#')]

        # API –∫–ª—é—á–∏
        api_keys = []
        if os.path.exists("api_keys.txt"):
            with open("api_keys.txt", 'r', encoding='utf-8') as f:
                api_keys = [line.strip() for line in f if line.strip() and not line.startswith('#')]

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        proxy_assignments = []
        if os.path.exists("proxy_assignments.txt"):
            with open("proxy_assignments.txt", 'r', encoding='utf-8') as f:
                proxy_assignments = [line.strip() for line in f if line.strip() and not line.startswith('#')]

        # –ü—Ä–æ–∫—Å–∏
        proxies = []
        if os.path.exists("proxies.txt"):
            with open("proxies.txt", 'r', encoding='utf-8') as f:
                proxies = [line.strip() for line in f if line.strip() and not line.startswith('#')]

        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        while len(api_keys) < len(keys):
            api_keys.append("9d9d6aa530b64877be75a16288a7eadb")  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á

        while len(proxy_assignments) < len(keys):
            proxy_assignments.append("0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏

        return keys, api_keys, proxy_assignments, proxies

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return [], [], [], []

def simple_config_menu():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keys, api_keys, proxy_assignments, proxies = load_wallets_info()

    if not keys:
        print("‚ùå –ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ private_keys.txt")
        return None

    print(f"\nüìã –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
    print("=" * 40)

    # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤
    print(f"üíº –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(keys)}")
    while True:
        try:
            wallet_count = input(f"–°–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (1-{len(keys)}): ").strip()
            wallet_count = int(wallet_count) if wallet_count else len(keys)
            if 1 <= wallet_count <= len(keys):
                break
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    # 2. –ë—Ä–∏–¥–∂–∏
    while True:
        try:
            bridge_count = input("üåâ –ë—Ä–∏–¥–∂–µ–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (0-5): ").strip()
            bridge_count = int(bridge_count) if bridge_count else 1
            if 0 <= bridge_count <= 5:
                break
            print("‚ùå –û—Ç 0 –¥–æ 5")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    # 3. –î–µ–ø–ª–æ–∏
    while True:
        try:
            deploy_count = input("üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (1-10): ").strip()
            deploy_count = int(deploy_count) if deploy_count else 3
            if 1 <= deploy_count <= 10:
                break
            print("‚ùå –û—Ç 1 –¥–æ 10")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    # 4. –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    print("\nüîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º)")
    print("2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")

    while True:
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ (1-2): ").strip()
        if mode in ['1', '2']:
            parallel = mode == '2'
            break
        print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2")

    # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    if proxies:
        print(f"\nüåê –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
        setup_proxies = input("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤? (y/n): ").lower().strip()

        if setup_proxies in ['y', 'yes', '–¥–∞']:
            configure_proxy_assignments(wallet_count)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        'wallet_count': wallet_count,
        'bridge_count': bridge_count,
        'deploy_count': deploy_count,
        'parallel': parallel,
        'bridge_amount_min': 0.001,
        'bridge_amount_max': 0.005
    }

    return config

def configure_proxy_assignments(wallet_count):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤"""
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {wallet_count} –∫–æ—à–µ–ª—å–∫–æ–≤:")
    print("–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ:")
    print("1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏")
    print("0 = –±–µ–∑ –ø—Ä–æ–∫—Å–∏")

    assignments = []
    for i in range(wallet_count):
        while True:
            choice = input(f"–ö–æ—à–µ–ª–µ–∫ {i+1}: ").strip()
            if choice in ['0', '1']:
                assignments.append(choice)
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open("proxy_assignments.txt", 'w', encoding='utf-8') as f:
            f.write("# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ (1=–¥–∞, 0=–Ω–µ—Ç)\n")
            for assignment in assignments:
                f.write(f"{assignment}\n")
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def show_summary(config):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keys, _, _, proxies = load_wallets_info()

    print(f"\nüìä –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ï–ö")
    print("=" * 30)
    print(f"üíº –ö–æ—à–µ–ª—å–∫–æ–≤: {config['wallet_count']}")
    print(f"üåâ –ë—Ä–∏–¥–∂–µ–π: {config['bridge_count']} –Ω–∞ –∫–æ—à–µ–ª–µ–∫")
    print(f"üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {config['deploy_count']} –Ω–∞ –∫–æ—à–µ–ª–µ–∫")
    print(f"‚ö° –†–µ–∂–∏–º: {'–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ' if config['parallel'] else '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'}")
    print(f"üí∞ –°—É–º–º–∞ –±—Ä–∏–¥–∂–∞: {config['bridge_amount_min']}-{config['bridge_amount_max']} ETH")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if proxies else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")

def run_automation(config):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    try:
        from jovay_automation import MultiAccountManager, Config

        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        automation_config = Config(
            max_threads=config['wallet_count'] if config['parallel'] else 1,
            bridge_count=config['bridge_count'],
            deploy_count=config['deploy_count'],
            bridge_amount_min=config['bridge_amount_min'],
            bridge_amount_max=config['bridge_amount_max'],
            use_proxy=True,  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            pause_between_accounts=(10, 30),
            pause_between_operations=(5, 15),
            pause_after_bridge=(60, 120),
            pause_after_deploy=(10, 25)
        )

        manager = MultiAccountManager(automation_config)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤
        if config['wallet_count'] < len(manager.private_keys):
            manager.private_keys = manager.private_keys[:config['wallet_count']]

        print(f"\nüöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
        print("=" * 30)

        if config['parallel']:
            manager.run_multi_threaded()
        else:
            manager.run_sequential()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ—Ç ASCII –±–∞–Ω–Ω–µ—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    os.system('cls' if os.name == 'nt' else 'clear')

    banner = """

    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚îÇ
    ‚îÇ   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚îÇ
    ‚îÇ   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚îÇ
    ‚îÇ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù        ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚îÇ
    ‚îÇ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚îÇ
    ‚îÇ ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚îÇ
    ‚îÇ                                                                           ‚îÇ
    ‚îÇ                                 FUCKER BOT                                ‚îÇ
    ‚îÇ                                                                           ‚îÇ
    ‚îÇ               [+] INITIALIZING AUTOMATION PROTOCOL [+]                    ‚îÇ
    ‚îÇ               [+] LOADING MULTI-ACCOUNT MANAGER... [+]                    ‚îÇ
    ‚îÇ               [+] CONNECTING TO RWA L2 NETWORK... [+]                     ‚îÇ
    ‚îÇ               [+] STATUS: READY FOR DEPLOYMENT [+]                        ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """

    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞
    try:
        from colorama import init, Fore, Style
        init()

        # –¶–≤–µ—Ç–Ω–æ–π –±–∞–Ω–Ω–µ—Ä
        colored_lines = []
        for line in banner.split('\n'):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
            colored_lines.append(Fore.CYAN + line + Style.RESET_ALL)

        # –ü–µ—á–∞—Ç–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        for line in colored_lines:
            print(line)
            time.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞

    except ImportError:
        # –ï—Å–ª–∏ colorama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—á–∞—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
        for line in banner.split('\n'):
            print(line)
            time.sleep(0.05)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä
    print_banner()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    try:
        from colorama import Fore, Style
        print(Fore.CYAN + "JOVAY FUCKER BOT" + Style.RESET_ALL)
    except ImportError:
        print("JOVAY FUCKER BOT")

    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_files():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª—å–∫–∏
    keys, api_keys, proxy_assignments, proxies = load_wallets_info()
    if not keys:
        print("‚ùå –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ private_keys.txt")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keys)} –∫–æ—à–µ–ª—å–∫–æ–≤")
    print(f"‚úÖ API –∫–ª—é—á–µ–π: {len(api_keys)}")
    print(f"‚úÖ –ü—Ä–æ–∫—Å–∏: {len(proxies)}")

    # –ú–µ–Ω—é
    print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
    print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
    print("2. üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
    print("3. ‚ùå –í—ã—Ö–æ–¥")

    choice = input("\n–í—ã–±–æ—Ä (1-3): ").strip()

    if choice == "1":
        config = simple_config_menu()
        if config:
            show_summary(config)
            confirm = input("\n‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å? (y/n): ").lower().strip()
            if confirm in ['y', 'yes', '–¥–∞']:
                run_automation(config)

    elif choice == "2":
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏...")
        wallet_count = len(keys)
        configure_proxy_assignments(wallet_count)

    elif choice == "3":
        print("üëã –í—ã—Ö–æ–¥")
        return

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
