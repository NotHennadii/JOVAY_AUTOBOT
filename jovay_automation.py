import requests
import json
import time
import random
from concurrent.futures import ThreadPoolExecutor, as_completed
from web3 import Web3
from eth_account import Account
try:
    from solcx import compile_source, install_solc, set_solc_version
    SOLC_AVAILABLE = True
except ImportError:
    SOLC_AVAILABLE = False
    print("‚ö†Ô∏è solcx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
import os
from dataclasses import dataclass
from typing import List, Optional, Dict

@dataclass
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∏–∑–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
    max_threads: int = 1
    bridge_count: int = 2  # –í–ö–õ–Æ–ß–ï–ù
    deploy_count: int = 3
    bridge_amount_min: float = 0.001
    bridge_amount_max: float = 0.005
    use_proxy: bool = False
    pause_between_accounts: tuple = (15, 30)
    pause_between_operations: tuple = (5, 10)
    pause_after_bridge: tuple = (60, 120)
    pause_after_deploy: tuple = (8, 15)
    pause_after_faucet: tuple = (30, 60)
    rpc_delay: float = 1.0

class JovayAutomation:
    def __init__(self, private_key: str, api_key: str, proxy: Optional[str] = None):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        """
        self.private_key = private_key
        self.api_key = api_key
        self.proxy = proxy
        self.account = Account.from_key(private_key)
        self.address = self.account.address
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'faucet': 0,
            'bridges': 0,
            'contracts': 0,
            'errors': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.jovay_w3 = None
        self.sepolia_w3 = None
        self.jovay_chain_id = 2019775
        self.sepolia_chain_id = 11155111
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3
        self._setup_web3()
        self._setup_sepolia_web3()
        
        print(f"üì± {self.address[:4]}...{self.address[-4:]} {'üåê' if proxy else 'üîó'}")

    def _retry_request(self, func, max_retries=3, delay=1):
        """–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        for attempt in range(max_retries):
            try:
                return func()
            except Exception as e:
                error_msg = str(e).lower()
                if "429" in error_msg or "too many requests" in error_msg or "rate limit" in error_msg:
                    if attempt < max_retries - 1:
                        wait_time = delay * (2 ** attempt)
                        print(f"‚è≥ {self.address[:4]}...{self.address[-4:]} –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º {wait_time}—Å...")
                        time.sleep(wait_time)
                        continue
                raise e
        return None

    def _safe_web3_call(self, w3_instance, method_name, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Web3 –º–µ—Ç–æ–¥–æ–≤ —Å retry"""
        def make_call():
            method = getattr(w3_instance.eth, method_name)
            return method(*args, **kwargs)
        
        return self._retry_request(make_call, max_retries=3, delay=1)

    def _validate_proxy_format(self, proxy: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∫—Å–∏"""
        try:
            if proxy.startswith(('http://', 'https://', 'socks5://', 'socks4://')):
                return True
                
            parts = proxy.split(':')
            if len(parts) in [2, 4]:
                ip, port = parts[0], parts[1]
                int(port)
                return True
            return False
        except:
            return False

    def _setup_web3(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jovay"""
        if self.proxy and not self._validate_proxy_format(self.proxy):
            print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {self.proxy}")
            self.proxy = None
        
        # Jovay RPC
        jovay_public_rpc = "https://api.zan.top/public/jovay-testnet"
        
        if self.api_key and self.api_key != "9d9d6aa530b64877be75a16288a7eadb":
            jovay_rpc = f"https://api.zan.top/node/v1/jovay/testnet/{self.api_key}"
            print(f"üîë {self.address[:4]}...{self.address[-4:]} –∏—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: {self.api_key[:8]}...")
        else:
            jovay_rpc = jovay_public_rpc
            print(f"üîì {self.address[:4]}...{self.address[-4:]} –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π RPC")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø—Ä–æ–∫—Å–∏
        if self.proxy:
            session = requests.Session()
            if self.proxy.startswith(('http://', 'https://', 'socks5://', 'socks4://')):
                proxy_dict = {'http': self.proxy, 'https': self.proxy}
            else:
                parts = self.proxy.split(':')
                if len(parts) == 4:
                    proxy_url = f"http://{parts[2]}:{parts[3]}@{parts[0]}:{parts[1]}"
                elif len(parts) == 2:
                    proxy_url = f"http://{parts[0]}:{parts[1]}"
                else:
                    proxy_url = None
                
                if proxy_url:
                    proxy_dict = {'http': proxy_url, 'https': proxy_url}
                else:
                    proxy_dict = {}
            
            if proxy_dict:
                session.proxies.update(proxy_dict)
                
            try:
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_rpc, session=session))
                if self.jovay_w3.is_connected():
                    chain_id = self.jovay_w3.eth.chain_id
                    print(f"üåê {self.address[:4]}...{self.address[-4:]} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Jovay (Chain ID: {chain_id})")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            except Exception as e:
                print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–∫—Å–∏ –æ—à–∏–±–∫–∞, fallback –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É")
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_public_rpc))
        else:
            try:
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_rpc))
                if self.jovay_w3.is_connected():
                    chain_id = self.jovay_w3.eth.chain_id
                    print(f"üîó {self.address[:4]}...{self.address[-4:]} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Jovay (Chain ID: {chain_id})")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            except Exception as e:
                print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} RPC –æ—à–∏–±–∫–∞, fallback –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É")
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_public_rpc))

    def _setup_sepolia_web3(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepolia —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ RPC"""
        # –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö RPC –¥–ª—è Sepolia
        sepolia_rpcs = [
            "https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161",
            "https://rpc.sepolia.org",
            "https://sepolia.gateway.tenderly.co",
            "https://ethereum-sepolia-rpc.publicnode.com",
            "https://1rpc.io/sepolia",
            "https://sepolia.drpc.org"
        ]
        
        self.sepolia_w3 = None
        
        for rpc_url in sepolia_rpcs:
            try:
                print(f"üîç {self.address[:4]}...{self.address[-4:]} —Ç–µ—Å—Ç–∏—Ä—É–µ–º Sepolia RPC: {rpc_url.split('/')[2]}")
                
                if self.proxy:
                    session = requests.Session()
                    if self.proxy.startswith(('http://', 'https://', 'socks5://', 'socks4://')):
                        proxy_dict = {'http': self.proxy, 'https': self.proxy}
                    else:
                        parts = self.proxy.split(':')
                        if len(parts) == 4:
                            proxy_url = f"http://{parts[2]}:{parts[3]}@{parts[0]}:{parts[1]}"
                        elif len(parts) == 2:
                            proxy_url = f"http://{parts[0]}:{parts[1]}"
                        else:
                            proxy_url = None
                        
                        if proxy_url:
                            proxy_dict = {'http': proxy_url, 'https': proxy_url}
                        else:
                            proxy_dict = {}
                    
                    if proxy_dict:
                        session.proxies.update(proxy_dict)
                        
                    temp_w3 = Web3(Web3.HTTPProvider(rpc_url, session=session))
                else:
                    temp_w3 = Web3(Web3.HTTPProvider(rpc_url))
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if temp_w3.is_connected():
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
                    block_number = temp_w3.eth.block_number
                    if block_number > 0:
                        self.sepolia_w3 = temp_w3
                        print(f"üîó {self.address[:4]}...{self.address[-4:]} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Sepolia ({rpc_url.split('/')[2]}, –±–ª–æ–∫: {block_number})")
                        break
                    else:
                        print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} RPC –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –±–ª–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ RPC {rpc_url.split('/')[2]}: {type(e).__name__}")
                continue
        
        if self.sepolia_w3 is None:
            print(f"‚ùå {self.address[:4]}...{self.address[-4:]} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É Sepolia RPC")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        time.sleep(1)

    def get_balances(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        balances = {'sepolia': 0.0, 'jovay': 0.0}
        
        # Sepolia –±–∞–ª–∞–Ω—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        try:
            if self.sepolia_w3 and self.sepolia_w3.is_connected():
                print(f"üí∞ {self.address[:4]}...{self.address[-4:]} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å Sepolia...")
                sepolia_balance_wei = self._safe_web3_call(self.sepolia_w3, 'get_balance', self.address)
                if sepolia_balance_wei is not None:
                    balances['sepolia'] = float(Web3.from_wei(sepolia_balance_wei, 'ether'))
                    print(f"üí∞ {self.address[:4]}...{self.address[-4:]} Sepolia –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balances['sepolia']:.6f} ETH")
                else:
                    print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} Sepolia –±–∞–ª–∞–Ω—Å = None")
            else:
                print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} Sepolia –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Sepolia: {type(e).__name__} - {str(e)[:50]}")
        
        # Jovay –±–∞–ª–∞–Ω—Å
        try:
            if self.jovay_w3 and self.jovay_w3.is_connected():
                jovay_balance_wei = self._safe_web3_call(self.jovay_w3, 'get_balance', self.address)
                if jovay_balance_wei is not None:
                    balances['jovay'] = float(Web3.from_wei(jovay_balance_wei, 'ether'))
                else:
                    balances['jovay'] = 0.0
        except Exception as e:
            print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Jovay: {e}")
            balances['jovay'] = 0.0
        
        return balances

    def claim_faucet(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞—É—á–µ—Ç Sepolia"""
        try:
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞—É—á–µ—Ç–∞...")
            
            # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞—É—á–µ—Ç–æ–≤ Sepolia
            faucets = [
                {
                    "name": "Sepolia PoW Faucet",
                    "url": "https://sepolia-faucet.pk910.de/api/startSession",
                    "method": "POST",
                    "data": {"addr": self.address}
                },
                {
                    "name": "Alchemy Faucet", 
                    "url": f"https://sepoliafaucet.com/api/claimTokens",
                    "method": "POST",
                    "data": {"walletAddress": self.address, "captcha": "skip"}
                },
                {
                    "name": "QuickNode Faucet",
                    "url": "https://faucet.quicknode.com/ethereum/sepolia",
                    "method": "POST", 
                    "data": {"wallet": self.address}
                }
            ]
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–∫—Å–∏
            if self.proxy:
                session = requests.Session()
                if self.proxy.startswith(('http://', 'https://', 'socks5://', 'socks4://')):
                    proxy_dict = {'http': self.proxy, 'https': self.proxy}
                else:
                    parts = self.proxy.split(':')
                    if len(parts) == 4:
                        proxy_url = f"http://{parts[2]}:{parts[3]}@{parts[0]}:{parts[1]}"
                    elif len(parts) == 2:
                        proxy_url = f"http://{parts[0]}:{parts[1]}"
                    else:
                        proxy_url = None
                    
                    if proxy_url:
                        proxy_dict = {'http': proxy_url, 'https': proxy_url}
                    else:
                        proxy_dict = {}
                
                if proxy_dict:
                    session.proxies.update(proxy_dict)
            else:
                session = requests.Session()
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-origin'
            }
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞—É—á–µ—Ç
            for faucet in faucets:
                try:
                    print(f"üíß {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–±—É–µ–º {faucet['name']}...")
                    
                    def make_faucet_request():
                        if faucet['method'] == 'POST':
                            response = session.post(
                                faucet['url'], 
                                json=faucet['data'], 
                                headers=headers, 
                                timeout=30
                            )
                        else:
                            response = session.get(
                                faucet['url'], 
                                params=faucet['data'], 
                                headers=headers, 
                                timeout=30
                            )
                        return response
                    
                    response = self._retry_request(make_faucet_request, max_retries=2, delay=3)
                    
                    if response is None:
                        print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        continue
                    
                    print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} –æ—Ç–≤–µ—Ç: {response.status_code}")
                    
                    if response.status_code == 200:
                        try:
                            result = response.json()
                            print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} JSON: {str(result)[:100]}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            success_indicators = ['success', 'ok', 'status', 'result']
                            is_success = False
                            
                            for indicator in success_indicators:
                                if indicator in result:
                                    if result[indicator] in [True, 'success', 'ok', 200, '200']:
                                        is_success = True
                                        break
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
                            if not is_success and 'error' not in result and 'Error' not in result:
                                is_success = True
                            
                            if is_success:
                                self.stats['faucet'] += 1
                                print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} ‚úÖ")
                                return True
                            else:
                                error_msg = result.get('message', result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                                print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                                
                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                            response_text = response.text.lower()
                            if any(word in response_text for word in ['success', 'sent', 'queued', 'processing']):
                                self.stats['faucet'] += 1
                                print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} ‚úÖ (text response)")
                                return True
                            else:
                                print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text[:100]}")
                    else:
                        print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        
                except Exception as e:
                    print(f"üíß {self.address[:4]}...{self.address[-4:]} {faucet['name']} –æ—à–∏–±–∫–∞: {type(e).__name__}")
                    continue
            
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –≤—Å–µ —Ñ–∞—É—á–µ—Ç—ã –Ω–µ—É–¥–∞—á–Ω—ã")
            return False
                
        except Exception as e:
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –æ–±—â–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞—É—á–µ—Ç–∞: {type(e).__name__}")
            return False

    def bridge_tokens(self, amount: float) -> bool:
        """–ë—Ä–∏–¥–∂ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–æ—Å—Ç Jovay"""
        try:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {amount:.4f} ETH...")
            
            if not self.sepolia_w3 or not self.sepolia_w3.is_connected():
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepolia")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Sepolia
            balances = self.get_balances()
            sepolia_balance = balances.get('sepolia', 0.0)
            
            if sepolia_balance < amount:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –≤ Sepolia: {sepolia_balance:.6f}")
                return False
            
            # –ê–¥—Ä–µ—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–æ—Å—Ç–∞ Jovay –≤ Sepolia
            bridge_contract_address = "0x940eFB877281884699176892B02A3db49f29CDE8"  # –†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –º–æ—Å—Ç–∞
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ABI –¥–ª—è –º–æ—Å—Ç–∞ Jovay
            bridge_abi = [
                {
                    "inputs": [],
                    "name": "depositETH",
                    "outputs": [],
                    "stateMutability": "payable",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "bridge",
                    "outputs": [],
                    "stateMutability": "payable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {"internalType": "address", "name": "to", "type": "address"},
                        {"internalType": "uint256", "name": "amount", "type": "uint256"}
                    ],
                    "name": "bridgeETH",
                    "outputs": [],
                    "stateMutability": "payable",
                    "type": "function"
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            bridge_contract = self.sepolia_w3.eth.contract(
                address=Web3.to_checksum_address(bridge_contract_address),
                abi=bridge_abi
            )
            
            # –ü–æ–ª—É—á–∞–µ–º nonce
            nonce = self._safe_web3_call(self.sepolia_w3, 'get_transaction_count', self.address)
            if nonce is None:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nonce")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º gas price
            try:
                gas_price = self.sepolia_w3.eth.gas_price
                if gas_price is None or gas_price == 0:
                    gas_price = Web3.to_wei('20', 'gwei')  # Fallback –¥–ª—è Sepolia
            except:
                gas_price = Web3.to_wei('20', 'gwei')
            
            # –í—ã—á–∏—Å–ª—è–µ–º amount –≤ wei
            amount_wei = Web3.to_wei(amount, 'ether')
            gas_limit = 150000  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –º–æ—Å—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ (amount + gas)
            total_needed = amount_wei + (gas_price * gas_limit)
            sepolia_balance_wei = Web3.to_wei(sepolia_balance, 'ether')
            
            if sepolia_balance_wei < total_needed:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–∞–∑–∞ + amount")
                return False
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ—Å—Ç–∞
            bridge_methods = [
                ("depositETH", lambda: bridge_contract.functions.depositETH()),
                ("bridge", lambda: bridge_contract.functions.bridge()),
                ("bridgeETH", lambda: bridge_contract.functions.bridgeETH(self.address, amount_wei))
            ]
            
            for method_name, method_func in bridge_methods:
                try:
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ {method_name}...")
                    
                    # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    if method_name == "bridgeETH":
                        # –î–ª—è bridgeETH –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º value, —Å—É–º–º–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                        transaction = method_func().build_transaction({
                            'chainId': self.sepolia_chain_id,
                            'gas': gas_limit,
                            'gasPrice': gas_price,
                            'nonce': nonce,
                        })
                    else:
                        # –î–ª—è depositETH –∏ bridge –ø–µ—Ä–µ–¥–∞–µ–º value
                        transaction = method_func().build_transaction({
                            'chainId': self.sepolia_chain_id,
                            'gas': gas_limit,
                            'gasPrice': gas_price,
                            'nonce': nonce,
                            'value': amount_wei,
                        })
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    def send_bridge_transaction():
                        signed_txn = self.sepolia_w3.eth.account.sign_transaction(transaction, self.private_key)
                        return self.sepolia_w3.eth.send_raw_transaction(signed_txn.rawTransaction)
                    
                    tx_hash = self._retry_request(send_bridge_transaction, max_retries=3, delay=2)
                    if tx_hash is None:
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {method_name}")
                        continue
                    
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {method_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {tx_hash.hex()[:10]}...")
                    
                    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    def wait_bridge_receipt():
                        return self.sepolia_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
                    
                    receipt = self._retry_request(wait_bridge_receipt, max_retries=2, delay=10)
                    if receipt is None:
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±—Ä–∏–¥–∂–∞ {method_name}")
                        continue
                    
                    if receipt.status == 1:
                        self.stats['bridges'] += 1
                        gas_used = Web3.from_wei(gas_price * receipt.gasUsed, 'ether')
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {method_name} ‚úÖ (–≥–∞–∑: {gas_used:.6f} ETH)")
                        return True
                    else:
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {method_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
                        continue
                        
                except Exception as e:
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: {type(e).__name__}")
                    continue
            
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –≤—Å–µ –º–µ—Ç–æ–¥—ã –±—Ä–∏–¥–∂–∞ –Ω–µ—É–¥–∞—á–Ω—ã")
            return False
                
        except Exception as e:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –±—Ä–∏–¥–∂–∞: {type(e).__name__}: {str(e)[:50]}")
            return False

    def deploy_contract(self, contract_type: str) -> bool:
        """–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú–ò —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        if not SOLC_AVAILABLE:
            print(f"üì¶ {self.address[:4]}...{self.address[-4:]} solcx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        try:
            if not self.jovay_w3 or not self.jovay_w3.is_connected():
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jovay")
                return False
                
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            balances = self.get_balances()
            current_balance = balances.get('jovay', 0.0)
            
            # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            min_balance = 0.0002  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
            if current_balance < min_balance:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH: {current_balance:.6f}")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Solidity
            try:
                install_solc('0.8.20')
                set_solc_version('0.8.20')
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} Solidity –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {type(e).__name__}")
                pass
            
            # –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contracts = {
                "token": self._get_smart_contract(),
                "nft": self._get_nft_contract(),
                "staking": self._get_storage_contract()
            }
            
            contract_source = contracts.get(contract_type, contracts["token"])
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
            try:
                compiled_sol = compile_source(contract_source)
                contract_name = list(compiled_sol.keys())[0].split(':')[1]
                contract_interface = compiled_sol[f'<stdin>:{contract_name}']
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {type(e).__name__}")
                return False
            
            contract = self.jovay_w3.eth.contract(
                abi=contract_interface['abi'],
                bytecode=contract_interface['bin']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º nonce
            nonce = self._safe_web3_call(self.jovay_w3, 'get_transaction_count', self.address)
            if nonce is None:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nonce")
                return False
            
            time.sleep(1.0)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ gas price
            try:
                gas_price = self.jovay_w3.eth.gas_price  # –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ ()
                if gas_price is None or gas_price == 0:
                    gas_price = Web3.to_wei('0.5', 'gwei')  # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô fallback
                    print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback gas: 0.5 gwei")
                else:
                    print(f"üì¶ {self.address[:4]}...{self.address[-4:]} gas price: {Web3.from_wei(gas_price, 'gwei'):.2f} gwei")
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ gas price, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.5 gwei")
                gas_price = Web3.to_wei('0.5', 'gwei')
            
            # –ù–ò–ó–ö–ò–ô –ª–∏–º–∏—Ç –≥–∞–∑–∞
            gas_limit = 800000  # –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –£–ú–ï–ù–¨–®–ï–ù
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–ï–ó –∑–∞–ø–∞—Å–∞
            actual_cost = Web3.from_wei(gas_price * gas_limit, 'ether')
            
            if current_balance < float(actual_cost):
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–∞–∑–∞:")
                print(f"    –ù—É–∂–Ω–æ: {actual_cost:.6f} ETH")
                print(f"    –ï—Å—Ç—å: {current_balance:.6f} ETH")
                print(f"    Gas: {Web3.from_wei(gas_price, 'gwei'):.2f} gwei, –ª–∏–º–∏—Ç: {gas_limit}")
                return False
            
            # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                transaction = contract.constructor().build_transaction({
                    'chainId': self.jovay_chain_id,
                    'gas': gas_limit,
                    'gasPrice': gas_price,
                    'nonce': nonce,
                })
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ build_transaction: {type(e).__name__}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            def send_transaction():
                signed_txn = self.jovay_w3.eth.account.sign_transaction(transaction, self.private_key)
                return self.jovay_w3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            tx_hash = self._retry_request(send_transaction, max_retries=3, delay=2)
            if tx_hash is None:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                return False
            
            print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {tx_hash.hex()[:10]}...")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            def wait_receipt():
                return self.jovay_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=180)
            
            receipt = self._retry_request(wait_receipt, max_retries=2, delay=5)
            if receipt is None:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
                return False
            
            if receipt.status == 1:
                self.stats['contracts'] += 1
                actual_cost_used = Web3.from_wei(gas_price * receipt.gasUsed, 'ether')
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} ‚úÖ –¥–µ–ø–ª–æ–π: {receipt.contractAddress[:6]}...{receipt.contractAddress[-4:]} (–≥–∞–∑: {actual_cost_used:.6f} ETH)")
                return True
            else:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return False
                
        except Exception as e:
            self.stats['errors'] += 1
            print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)[:50]}")
            return False

    def _get_nft_contract(self) -> str:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MiniNFT_{random_id} {{
    mapping(uint256 => address) public owners;
    uint256 public count = 0;
    
    constructor() {{}}
    
    function mint() public {{
        count++;
        owners[count] = msg.sender;
    }}
}}
"""

    def _get_storage_contract(self) -> str:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MiniStorage_{random_id} {{
    uint256 public data;
    
    constructor() {{}}
    
    function set(uint256 _data) public {{
        data = _data;
    }}
}}
"""

    def _get_smart_contract(self) -> str:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MiniToken_{random_id} {{
    mapping(address => uint256) public balance;
    
    constructor() {{
        balance[msg.sender] = 1000;
    }}
    
    function transfer(address to, uint256 amount) public {{
        balance[msg.sender] -= amount;
        balance[to] += amount;
    }}
}}
"""

    def run_automation(self, config: Config) -> Dict[str, int]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Ñ–∞—É—á–µ—Ç ‚Üí –±—Ä–∏–¥–∂ ‚Üí –¥–µ–ø–ª–æ–π - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        print(f"‚ñ∂Ô∏è {self.address[:4]}...{self.address[-4:]} —Å—Ç–∞—Ä—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        balances = self.get_balances()
        print(f"üí∞ {self.address[:4]}...{self.address[-4:]} –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
        print(f"    Sepolia: {balances['sepolia']:.6f} ETH")
        print(f"    Jovay: {balances['jovay']:.6f} ETH")
        
        # –®–∞–≥ 1: –§–∞—É—á–µ—Ç –í–ö–õ–Æ–ß–ï–ù
        print(f"üíß {self.address[:4]}...{self.address[-4:]} –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ñ–∞—É—á–µ—Ç–∞...")
        if self.claim_faucet():
            print(f"üíß {self.address[:4]}...{self.address[-4:]} —Ñ–∞—É—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
            pause_time = random.uniform(*config.pause_after_faucet)
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ñ–∞—É—á–µ—Ç–∞ {pause_time:.0f}—Å")
            time.sleep(pause_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Ñ–∞—É—á–µ—Ç–∞
            balances = self.get_balances()
        else:
            print(f"üíß {self.address[:4]}...{self.address[-4:]} —Ñ–∞—É—á–µ—Ç –Ω–µ—É–¥–∞—á–µ–Ω")
        
        # –®–∞–≥ 2: –ë—Ä–∏–¥–∂ –í–ö–õ–Æ–ß–ï–ù
        if config.bridge_count > 0:
            sepolia_balance = balances.get('sepolia', 0.0)
            if sepolia_balance > 0.01:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –±—Ä–∏–¥–∂–∞
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–∞—á–∏–Ω–∞–µ–º –±—Ä–∏–¥–∂...")
                
                for i in range(config.bridge_count):
                    # –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞
                    bridge_amount = random.uniform(config.bridge_amount_min, config.bridge_amount_max)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                    current_sepolia = self.get_balances().get('sepolia', 0.0)
                    if current_sepolia < bridge_amount + 0.005:  # +0.005 –¥–ª—è –≥–∞–∑–∞
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±—Ä–∏–¥–∂–∞ {i+1}")
                        break
                    
                    if self.bridge_tokens(bridge_amount):
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {i+1} ‚úÖ")
                    else:
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {i+1} ‚ùå")
                        self.stats['errors'] += 1
                    
                    if i < config.bridge_count - 1:
                        pause_time = random.uniform(*config.pause_after_bridge)
                        print(f"üåâ {self.address[:4]}...{self.address[-4:]} –ø–∞—É–∑–∞ {pause_time:.0f}—Å")
                        time.sleep(pause_time)
            else:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –≤ Sepolia –¥–ª—è –±—Ä–∏–¥–∂–∞")
        else:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        
        # –®–∞–≥ 3: –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        current_jovay_balance = self.get_balances().get('jovay', 0.0)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –±—Ä–∏–¥–∂–∞
        min_balance_for_deploy = 0.0002  # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô –º–∏–Ω–∏–º—É–º
        
        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è:")
        print(f"    –ï—Å—Ç—å: {current_jovay_balance:.6f} ETH")
        print(f"    –ù—É–∂–Ω–æ: {min_balance_for_deploy:.6f} ETH")
        
        if current_jovay_balance >= min_balance_for_deploy:
            contract_types = ["token", "nft", "staking"]
            deploy_per_type = max(1, config.deploy_count // 3)
            
            print(f"‚úÖ {self.address[:4]}...{self.address[-4:]} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π")
            
            for contract_type in contract_types:
                for i in range(deploy_per_type):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–µ–ø–ª–æ–µ–º
                    current_balance_check = self.get_balances().get('jovay', 0.0)  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                    if current_balance_check < 0.0001:  # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô –º–∏–Ω–∏–º—É–º
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –º–∞–ª–æ ETH: {current_balance_check:.6f}")
                        break
                        
                    if self.deploy_contract(contract_type):
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} ‚úÖ")
                    else:
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} ‚ùå")
                    
                    if i < deploy_per_type - 1 or contract_type != contract_types[-1]:
                        pause_time = random.uniform(*config.pause_after_deploy)
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –ø–∞—É–∑–∞ {pause_time:.0f}—Å")
                        time.sleep(pause_time)
        else:
            print(f"‚ùå {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –¥–µ–ø–ª–æ—è")
            print(f"üí° {self.address[:4]}...{self.address[-4:]} –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã: https://zan.top/faucet/jovay")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        final_balances = self.get_balances()
        
        print(f"üèÅ {self.address[:4]}...{self.address[-4:]} –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"   üí∞ Sepolia: {balances['sepolia']:.6f} ‚Üí {final_balances['sepolia']:.6f}")
        print(f"   üí∞ Jovay: {balances['jovay']:.6f} ‚Üí {final_balances['jovay']:.6f}")
        print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–∏: üíß{self.stats['faucet']} üåâ{self.stats['bridges']} üì¶{self.stats['contracts']} ‚ùå{self.stats['errors']}")
        
        return self.stats


class MultiAccountManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    
    def __init__(self, config: Config):
        self.config = config
        self.private_keys = []
        self.api_keys = []
        self.proxy_assignments = []
        self.proxies = []
        self.load_accounts()

    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å API –∫–ª—é—á–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
        try:
            with open("private_keys.txt", 'r', encoding='utf-8') as f:
                self.private_keys = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª private_keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.private_keys = []
        
        # API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open("api_keys.txt", 'r', encoding='utf-8') as f:
                api_lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
                self.api_keys = []
                
                for line in api_lines:
                    if not line.startswith('#') and line != "9d9d6aa530b64877be75a16288a7eadb":
                        self.api_keys.append(line)
                    elif line == "9d9d6aa530b64877be75a16288a7eadb":
                        self.api_keys.append(line)
                        
                print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {len(self.api_keys)}")
                
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª api_keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–æ–º...")
            self.api_keys = []
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è api_keys.txt: {e}")
            self.api_keys = []
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º API –∫–ª—é—á–∏ –¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
        default_api = "9d9d6aa530b64877be75a16288a7eadb"
        while len(self.api_keys) < len(self.private_keys):
            self.api_keys.append(default_api)
            
        print(f"üîë –ò—Ç–æ–≥–æ API –∫–ª—é—á–µ–π: {len(self.api_keys)} (–¥–ª—è {len(self.private_keys)} –∫–æ—à–µ–ª—å–∫–æ–≤)")
        
        # –ü—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        try:
            with open("proxy_assignments.txt", 'r', encoding='utf-8') as f:
                self.proxy_assignments = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except:
            self.proxy_assignments = []
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        while len(self.proxy_assignments) < len(self.private_keys):
            self.proxy_assignments.append("0")
        
        # –ü—Ä–æ–∫—Å–∏
        try:
            with open("proxies.txt", 'r', encoding='utf-8') as f:
                self.proxies = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except:
            self.proxies = []

    def get_proxy_for_account(self, account_index: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_index >= len(self.proxy_assignments):
            return None
        
        if self.proxy_assignments[account_index] == "1" and self.proxies:
            return self.proxies[account_index % len(self.proxies)]
        
        return None

    def process_account(self, account_index: int) -> Dict[str, int]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            private_key = self.private_keys[account_index]
            api_key = self.api_keys[account_index] if account_index < len(self.api_keys) else self.api_keys[0]
            proxy = self.get_proxy_for_account(account_index)
            
            automation = JovayAutomation(private_key, api_key, proxy)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            if account_index > 0:
                pause = random.uniform(*self.config.pause_between_accounts)
                print(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {pause:.0f}—Å")
                time.sleep(pause)
            
            return automation.run_automation(self.config)
            
        except Exception as e:
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_index + 1}: –æ—à–∏–±–∫–∞ {type(e).__name__} - {str(e)[:50]}")
            return {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 1}

    def run_sequential(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        print(f"\nüîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú")
        print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.private_keys)}")
        print("=" * 40)
        
        total_stats = {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 0}
        
        for i in range(len(self.private_keys)):
            print(f"\nüë§ –ê–ö–ö–ê–£–ù–¢ {i + 1}/{len(self.private_keys)}")
            stats = self.process_account(i)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for key in total_stats:
                total_stats[key] += stats[key]
        
        self._print_final_stats(total_stats)

    def run_multi_threaded(self):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        print(f"\n‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú")
        print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.private_keys)}")
        print(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {self.config.max_threads}")
        print("=" * 40)
        
        total_stats = {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 0}
        
        with ThreadPoolExecutor(max_workers=self.config.max_threads) as executor:
            futures = []
            for i in range(len(self.private_keys)):
                future = executor.submit(self.process_account, i)
                futures.append(future)
            
            completed = 0
            for future in as_completed(futures):
                try:
                    stats = future.result()
                    completed += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    for key in total_stats:
                        total_stats[key] += stats[key]
                    
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}/{len(self.private_keys)}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")
                    completed += 1
        
        self._print_final_stats(total_stats)

    def _print_final_stats(self, stats: Dict[str, int]):
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 30)
        print(f"üíß –§–∞—É—á–µ—Ç: {stats['faucet']}")
        print(f"üåâ –ë—Ä–∏–¥–∂–∏: {stats['bridges']}")
        print(f"üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {stats['contracts']}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {stats['errors']}")
        
        total_operations = stats['faucet'] + stats['bridges'] + stats['contracts']
        if total_operations > 0:
            success_rate = ((total_operations - stats['errors']) / total_operations) * 100
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if stats['contracts'] > 0:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: https://scan.jovay.io")


def create_example_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    files_to_create = {
        "private_keys.txt": [
            "# –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ—à–µ–ª—å–∫–æ–≤",
            "# –ö–∞–∂–¥—ã–π –∫–ª—é—á —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            "# 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
            ""
        ],
        "api_keys.txt": [
            "# API –∫–ª—é—á–∏ ZAN –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞",
            "# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt",
            "# –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ https://zan.top",
            "# –§–æ—Ä–º–∞—Ç: –æ–¥–∏–Ω –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–æ–∫—É",
            "",
            "# –ü—Ä–∏–º–µ—Ä—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏):",
            "# abc123def456ghi789jkl012mno345pqr678stu901",
            "# def456ghi789jkl012mno345pqr678stu901vwx234",
            "",
            "# –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á (–ø—É–±–ª–∏—á–Ω—ã–π RPC, –º–µ–¥–ª–µ–Ω–Ω–µ–µ):",
            "9d9d6aa530b64877be75a16288a7eadb",
            ""
        ],
        "proxy_assignments.txt": [
            "# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞", 
            "# 1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏, 0 = –±–µ–∑ –ø—Ä–æ–∫—Å–∏",
            "# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt",
            "0",
            ""
        ],
        "proxies.txt": [
            "# –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã",
            "# –§–æ—Ä–º–∞—Ç: ip:port:user:pass –∏–ª–∏ ip:port",
            "# 192.168.1.1:8080",
            "# 192.168.1.1:8080:username:password",
            ""
        ]
    }
    
    for filename, content in files_to_create.items():
        if not os.path.exists(filename):
            with open(filename, 'w', encoding='utf-8') as f:
                f.write('\n'.join(content))
            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ JOVAY NETWORK AUTOMATION - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 50)
    
    create_example_files()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –í–ö–õ–Æ–ß–ï–ù–ù–´–ú–ò —Ñ–∞—É—á–µ—Ç–æ–º –∏ –±—Ä–∏–¥–∂–µ–º
    config = Config(
        max_threads=10,
        bridge_count=2,  # –í–ö–õ–Æ–ß–ï–ù
        deploy_count=3,
        bridge_amount_min=0.001,
        bridge_amount_max=0.005,
        pause_between_accounts=(15, 30),    
        pause_between_operations=(5, 10),   
        pause_after_bridge=(60, 120),       
        pause_after_deploy=(8, 15),         
        pause_after_faucet=(30, 60),        
        rpc_delay=1.0                       
    )
    
    manager = MultiAccountManager(config)
    
    if not manager.private_keys:
        print("‚ùå –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ private_keys.txt")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª private_keys.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏")
        return
    
    print(f"\nüîß –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–£–°–ö–ê:")
    print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(manager.private_keys)}")
    print(f"üîë API –∫–ª—é—á–µ–π: {len(manager.api_keys)}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {len(manager.proxies)}")
    print(f"üíß –§–∞—É—á–µ—Ç: –í–ö–õ–Æ–ß–ï–ù")
    print(f"üåâ –ë—Ä–∏–¥–∂: –í–ö–õ–Æ–ß–ï–ù ({config.bridge_count} –æ–ø–µ—Ä–∞—Ü–∏–π)")
    print(f"üí∞ –°—É–º–º–∞ –±—Ä–∏–¥–∂–∞: {config.bridge_amount_min}-{config.bridge_amount_max} ETH")
    print(f"üì¶ –î–µ–ø–ª–æ–π: {config.deploy_count} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    print(f"üí∞ –ú–∏–Ω–∏–º—É–º –¥–ª—è –¥–µ–ø–ª–æ—è: 0.0002 ETH")
    print(f"‚õΩ Gas price: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print(f"üî• Gas limit: 800,000 (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    print(f"üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ")
    
    print(f"\nüìã –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê:")
    print("1. üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    
    choice = input("\n–í—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        manager.run_sequential()
    elif choice == "2":
        manager.run_multi_threaded()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
        manager.run_sequential()


if __name__ == "__main__":
    main()