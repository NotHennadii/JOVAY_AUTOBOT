import requests
import json
import time
import random
from concurrent.futures import ThreadPoolExecutor, as_completed
from web3 import Web3
from eth_account import Account
from solcx import compile_source, install_solc, set_solc_version
import os
from dataclasses import dataclass
from typing import List, Optional

@dataclass
class Config:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    max_threads: int = 1
    bridge_count: int = 1
    deploy_count: int = 3
    bridge_amount_min: float = 0.001
    bridge_amount_max: float = 0.005
    use_proxy: bool = False
    pause_between_accounts: tuple = (10, 30)
    pause_between_operations: tuple = (5, 15)
    pause_after_bridge: tuple = (60, 120)
    pause_after_deploy: tuple = (10, 25)

class JovayAutomation:
    def __init__(self, private_key: str, api_key: str, proxy: Optional[str] = None):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è Jovay Network
        """
        self.private_key = private_key
        self.api_key = api_key
        self.proxy = proxy
        self.account = Account.from_key(private_key)
        self.address = self.account.address
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'faucet': 0,
            'bridges': 0,
            'contracts': 0,
            'errors': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3
        self._setup_web3()
        
        print(f"üì± {self.address[:4]}...{self.address[-4:]} {'üåê' if proxy else 'üîó'}")

    def _setup_web3(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        # Sepolia
        sepolia_rpc = "https://eth-sepolia.public.blastapi.io"
        self.sepolia_w3 = Web3(Web3.HTTPProvider(sepolia_rpc))
        
        # Jovay - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π RPC endpoint
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint
        jovay_public_rpc = "https://api.zan.top/public/jovay-testnet"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π endpoint
        if self.api_key and self.api_key != "9d9d6aa530b64877be75a16288a7eadb":
            jovay_rpc = f"https://api.zan.top/node/v1/jovay/testnet/{self.api_key}"
        else:
            jovay_rpc = jovay_public_rpc
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–∫—Å–∏
        if self.proxy:
            session = requests.Session()
            proxy_dict = {'http': self.proxy, 'https': self.proxy}
            session.proxies.update(proxy_dict)
            try:
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_rpc, session=session))
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                chain_id = self.jovay_w3.eth.chain_id
                print(f"üåê {self.address[:4]}...{self.address[-4:]} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Jovay (Chain ID: {chain_id})")
            except:
                # Fallback –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_public_rpc))
                print(f"üåê {self.address[:4]}...{self.address[-4:]} fallback –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É RPC")
        else:
            try:
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_rpc))
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                chain_id = self.jovay_w3.eth.chain_id
                print(f"üîó {self.address[:4]}...{self.address[-4:]} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Jovay (Chain ID: {chain_id})")
            except:
                # Fallback –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π
                self.jovay_w3 = Web3(Web3.HTTPProvider(jovay_public_rpc))
                print(f"üîó {self.address[:4]}...{self.address[-4:]} fallback –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É RPC")
        
        # Chain IDs
        self.sepolia_chain_id = 11155111
        self.jovay_chain_id = 2019775

    def get_balances(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤"""
        try:
            sepolia_balance = self.sepolia_w3.eth.get_balance(self.address)
            sepolia_eth = float(self.sepolia_w3.from_wei(sepolia_balance, 'ether'))
            
            jovay_balance = self.jovay_w3.eth.get_balance(self.address)
            jovay_eth = float(self.jovay_w3.from_wei(jovay_balance, 'ether'))
            
            return {'sepolia': sepolia_eth, 'jovay': jovay_eth}
        except Exception:
            return {'sepolia': 0.0, 'jovay': 0.0}

    def claim_faucet(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∫—Ä–∞–Ω–∞"""
        try:
            session = requests.Session()
            if self.proxy:
                session.proxies.update({'http': self.proxy, 'https': self.proxy})
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint —Ñ–∞—É—á–µ—Ç–∞
            faucet_url = "https://zan.top/faucet/jovay"
            payload = {"address": self.address, "chainId": self.jovay_chain_id}
            
            response = session.post(faucet_url, json=payload, timeout=30)
            
            if response.status_code == 200:
                print(f"üíß {self.address[:4]}...{self.address[-4:]} –∂–¥–µ–º 30—Å...")
                time.sleep(30)  # –ñ–¥–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                balances = self.get_balances()
                if balances['jovay'] > 0.0005:
                    self.stats['faucet'] += 1
                    return True
                else:
                    print(f"üíß {self.address[:4]}...{self.address[-4:]} —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏")
                    return False
            else:
                print(f"üíß {self.address[:4]}...{self.address[-4:]} —Ñ–∞—É—á–µ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞: {type(e).__name__}")
            return False

    def bridge_tokens(self, amount: float) -> bool:
        """–ë—Ä–∏–¥–∂ —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            balances = self.get_balances()
            if balances['sepolia'] < amount + 0.002:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH: {balances['sepolia']:.4f}")
                return False
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –±—Ä–∏–¥–∂–∞ (–Ω—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
            bridge_address = "0x4200000000000000000000000000000000000010"
            
            nonce = self.sepolia_w3.eth.get_transaction_count(self.address)
            gas_price = self.sepolia_w3.eth.gas_price
            amount_wei = self.sepolia_w3.to_wei(amount, 'ether')
            
            transaction = {
                'to': bridge_address,
                'value': amount_wei,
                'gas': 150000,
                'gasPrice': int(gas_price * 1.1),
                'nonce': nonce,
                'chainId': self.sepolia_chain_id
            }
            
            signed_txn = self.sepolia_w3.eth.account.sign_transaction(transaction, self.private_key)
            tx_hash = self.sepolia_w3.eth.send_raw_transaction(signed_txn.raw_transaction)
            
            receipt = self.sepolia_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
            
            if receipt.status == 1:
                self.stats['bridges'] += 1
                return True
            else:
                print(f"üåâ {self.address[:4]}...{self.address[-4:]} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return False
        except Exception as e:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞: {type(e).__name__}")
            return False

    def deploy_contract(self, contract_type: str) -> bool:
        """–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        try:
            balances = self.get_balances()
            current_balance = balances['jovay']
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
            try:
                gas_price = self.jovay_w3.eth.gas_price or self.jovay_w3.to_wei('1', 'gwei')
                gas_limit = 1500000
                estimated_cost = self.jovay_w3.from_wei(gas_price * gas_limit, 'ether')
                
                # –î–æ–±–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å
                required_balance = float(estimated_cost) * 1.1  # –£–º–µ–Ω—å—à–µ–Ω –∑–∞–ø–∞—Å
                
                if current_balance < required_balance:
                    print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH:")
                    print(f"    –ï—Å—Ç—å: {current_balance:.6f} ETH")
                    print(f"    –ù—É–∂–Ω–æ: {required_balance:.6f} ETH")
                    print(f"    Gas: {Web3.from_wei(gas_price, 'gwei'):.2f} gwei")
                    return False
                    
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {type(e).__name__}")
                # Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –º–∏–Ω–∏–º—É–º
                if current_balance < 0.0002:
                    print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH: {current_balance:.6f}")
                    return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Solidity
            try:
                install_solc('0.8.20')
                set_solc_version('0.8.20')
            except Exception as e:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} Solidity –æ—à–∏–±–∫–∞: {type(e).__name__}")
                pass
            
            # –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contracts = {
                "token": self._get_smart_contract(),    # ERC20 Token
                "nft": self._get_nft_contract(),        # NFT Contract  
                "staking": self._get_storage_contract() # Staking Contract
            }
            
            contract_source = contracts.get(contract_type, contracts["token"])
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
            compiled_sol = compile_source(contract_source)
            contract_name = list(compiled_sol.keys())[0].split(':')[1]
            contract_interface = compiled_sol[f'<stdin>:{contract_name}']
            
            contract = self.jovay_w3.eth.contract(
                abi=contract_interface['abi'],
                bytecode=contract_interface['bin']
            )
            
            # –î–µ–ø–ª–æ–π
            nonce = self.jovay_w3.eth.get_transaction_count(self.address)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞
            gas_price = self.jovay_w3.eth.gas_price or self.jovay_w3.to_wei('1', 'gwei')
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ü–µ–Ω–∏—Ç—å –≥–∞–∑
            try:
                gas_estimate = contract.constructor().estimate_gas()
                gas_limit = int(gas_estimate * 1.2)  # –î–æ–±–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å
            except:
                gas_limit = 1500000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç
            
            transaction = contract.constructor().build_transaction({
                'chainId': self.jovay_chain_id,
                'gas': gas_limit,
                'gasPrice': gas_price,
                'nonce': nonce,
            })
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            actual_cost = self.jovay_w3.from_wei(gas_price * gas_limit, 'ether')
            if current_balance < float(actual_cost):
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–∞–∑–∞:")
                print(f"    –ù—É–∂–Ω–æ: {actual_cost:.6f} ETH")
                print(f"    –ï—Å—Ç—å: {current_balance:.6f} ETH")
                return False
            
            signed_txn = self.jovay_w3.eth.account.sign_transaction(transaction, self.private_key)
            tx_hash = self.jovay_w3.eth.send_raw_transaction(signed_txn.raw_transaction)
            
            receipt = self.jovay_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
            
            if receipt.status == 1:
                self.stats['contracts'] += 1
                actual_cost_used = self.jovay_w3.from_wei(gas_price * receipt.gasUsed, 'ether')
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –¥–µ–ø–ª–æ–π: {receipt.contractAddress[:6]}...{receipt.contractAddress[-4:]} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {actual_cost_used:.6f} ETH)")
                return True
            else:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return False
                
        except Exception as e:
            error_msg = str(e).lower()
            if "insufficient funds" in error_msg:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–∞–∑–∞")
            elif "invalid chainid" in error_msg:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –Ω–µ–≤–µ—Ä–Ω—ã–π Chain ID")
            elif "nonce" in error_msg:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –ø—Ä–æ–±–ª–µ–º–∞ —Å nonce")
            elif "gas" in error_msg:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–∞–∑–æ–º")
            else:
                print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} –æ—à–∏–±–∫–∞: {type(e).__name__}")
            return False

    def _get_nft_contract(self) -> str:
        """NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ OpenZeppelin"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract JovayNFT_{random_id} {{
    mapping(uint256 => address) public owners;
    mapping(address => uint256) public balances;
    mapping(uint256 => string) public tokenURIs;
    uint256 public totalSupply = 0;
    address public owner;
    string public name = "JovayNFT";
    string public symbol = "JNFT";
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Minted(address indexed to, uint256 indexed tokenId);
    
    constructor() {{
        owner = msg.sender;
    }}
    
    modifier onlyOwner() {{
        require(msg.sender == owner, "Only owner");
        _;
    }}
    
    function mint(address to, string memory _tokenURI) public onlyOwner {{
        require(to != address(0), "Cannot mint to zero address");
        totalSupply++;
        uint256 tokenId = totalSupply;
        
        owners[tokenId] = to;
        balances[to]++;
        tokenURIs[tokenId] = _tokenURI;
        
        emit Transfer(address(0), to, tokenId);
        emit Minted(to, tokenId);
    }}
    
    function ownerOf(uint256 tokenId) public view returns (address) {{
        require(owners[tokenId] != address(0), "Token does not exist");
        return owners[tokenId];
    }}
    
    function balanceOf(address _owner) public view returns (uint256) {{
        return balances[_owner];
    }}
    
    function tokenURI(uint256 tokenId) public view returns (string memory) {{
        require(owners[tokenId] != address(0), "Token does not exist");
        return tokenURIs[tokenId];
    }}
}}
"""

    def _get_storage_contract(self) -> str:
        """Storage –∫–æ–Ω—Ç—Ä–∞–∫—Ç - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ç–µ–π–∫–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract JovayStaking_{random_id} {{
    mapping(address => uint256) public stakes;
    mapping(address => uint256) public lastStakeTime;
    uint256 public totalStaked;
    uint256 public rewardRate = 1e18;
    
    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    
    constructor() {{}}
    
    function stake() external payable {{
        require(msg.value > 0, "Cannot stake 0");
        stakes[msg.sender] += msg.value;
        lastStakeTime[msg.sender] = block.timestamp;
        totalStaked += msg.value;
        emit Staked(msg.sender, msg.value);
    }}
    
    function withdraw(uint256 amount) external {{
        require(stakes[msg.sender] >= amount, "Insufficient stake");
        stakes[msg.sender] -= amount;
        totalStaked -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawn(msg.sender, amount);
    }}
    
    function getStake(address user) external view returns (uint256) {{
        return stakes[user];
    }}
    
    function checkRewards(address user) external view returns (uint256) {{
        if (stakes[user] == 0) return 0;
        uint256 timeDiff = block.timestamp - lastStakeTime[user];
        return timeDiff * rewardRate * stakes[user] / 1e18;
    }}
}}
"""

    def _get_smart_contract(self) -> str:
        """Smart –∫–æ–Ω—Ç—Ä–∞–∫—Ç - ERC20 —Ç–æ–∫–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        random_id = random.randint(1000, 9999)
        return f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract JovayToken_{random_id} {{
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    string public name = "JovayToken";
    string public symbol = "JTK";
    uint8 public decimals = 6;
    uint256 public totalSupply;
    address public owner;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() {{
        uint256 initialSupply = 1000000 * 10**decimals;
        totalSupply = initialSupply;
        balanceOf[msg.sender] = initialSupply;
        owner = msg.sender;
        emit Transfer(address(0), msg.sender, initialSupply);
    }}
    
    function transfer(address to, uint256 amount) external returns (bool) {{
        require(to != address(0), "Transfer to zero address");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }}
    
    function approve(address spender, uint256 amount) external returns (bool) {{
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }}
    
    function transferFrom(address from, address to, uint256 amount) external returns (bool) {{
        require(allowance[from][msg.sender] >= amount, "Allowance exceeded");
        require(balanceOf[from] >= amount, "Insufficient balance");
        
        allowance[from][msg.sender] -= amount;
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
        return true;
    }}
}}
"""

    def run_automation(self, config: Config):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print(f"‚ñ∂Ô∏è {self.address[:4]}...{self.address[-4:]} —Å—Ç–∞—Ä—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        balances = self.get_balances()
        print(f"üí∞ {self.address[:4]}...{self.address[-4:]} –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
        print(f"    Sepolia: {balances['sepolia']:.6f} ETH")
        print(f"    Jovay: {balances['jovay']:.6f} ETH")
        
        # –®–∞–≥ 1: –§–∞—É—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–æ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        if balances['jovay'] < 0.001:
            print(f"üíß {self.address[:4]}...{self.address[-4:]} –º–∞–ª–æ ETH –≤ Jovay, –Ω—É–∂–µ–Ω —Ñ–∞—É—á–µ—Ç")
            if self.claim_faucet():
                print(f"üíß {self.address[:4]}...{self.address[-4:]} —Ñ–∞—É—á–µ—Ç ‚úÖ")
                balances = self.get_balances()  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            else:
                print(f"üíß {self.address[:4]}...{self.address[-4:]} —Ñ–∞—É—á–µ—Ç ‚ùå")
                self.stats['errors'] += 1
        
        # –®–∞–≥ 2: –ë—Ä–∏–¥–∂–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º)
        if config.bridge_count > 0 and balances['sepolia'] >= 0.003:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –Ω–∞—á–∏–Ω–∞–µ–º –±—Ä–∏–¥–∂ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º")
            
            for i in range(config.bridge_count):
                current_sepolia = self.get_balances()['sepolia']
                if current_sepolia < 0.003:
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–ø—É—Å–∫ –±—Ä–∏–¥–∂–∞ - –º–∞–ª–æ ETH: {current_sepolia:.6f}")
                    break
                
                amount = random.uniform(config.bridge_amount_min, config.bridge_amount_max)
                if self.bridge_tokens(amount):
                    pause_time = random.uniform(*config.pause_after_bridge)
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {i+1} ‚úÖ –ø–∞—É–∑–∞ {pause_time:.0f}—Å")
                    time.sleep(pause_time)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Jovay
                    new_jovay_balance = self.get_balances()['jovay']
                    if new_jovay_balance > balances['jovay']:
                        print(f"‚úÖ {self.address[:4]}...{self.address[-4:]} —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ Jovay: {new_jovay_balance:.6f} ETH")
                        balances['jovay'] = new_jovay_balance
                    else:
                        print(f"‚ö†Ô∏è {self.address[:4]}...{self.address[-4:]} —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏, –∂–¥–µ–º...")
                        time.sleep(60)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                        balances = self.get_balances()
                else:
                    print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ {i+1} ‚ùå")
                    self.stats['errors'] += 1
        elif config.bridge_count > 0:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–ø—É—Å–∫ –±—Ä–∏–¥–∂–∞ - –º–∞–ª–æ ETH –≤ Sepolia: {balances['sepolia']:.6f}")
        else:
            print(f"üåâ {self.address[:4]}...{self.address[-4:]} –±—Ä–∏–¥–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        # –®–∞–≥ 3: –î–µ–ø–ª–æ–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –≤ Jovay)
        current_jovay_balance = balances['jovay']
        min_balance_for_deploy = 0.0005  # –£–ú–ï–ù–¨–®–ï–ù –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è:")
        print(f"    –ï—Å—Ç—å: {current_jovay_balance:.6f} ETH")
        print(f"    –ù—É–∂–Ω–æ: {min_balance_for_deploy:.6f} ETH")
        
        if current_jovay_balance >= min_balance_for_deploy:
            contract_types = ["token", "nft", "staking"]
            deploy_per_type = max(1, config.deploy_count // 3)
            
            print(f"‚úÖ {self.address[:4]}...{self.address[-4:]} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π")
            
            for contract_type in contract_types:
                for i in range(deploy_per_type):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–µ–ø–ª–æ–µ–º
                    current_balance = self.get_balances()['jovay']
                    if current_balance < 0.0002:  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∞
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –º–∞–ª–æ ETH: {current_balance:.6f}")
                        break
                        
                    if self.deploy_contract(contract_type):
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} ‚úÖ")
                    else:
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} {contract_type} ‚ùå")
                        self.stats['errors'] += 1
                    
                    if i < deploy_per_type - 1 or contract_type != contract_types[-1]:
                        pause_time = random.uniform(*config.pause_after_deploy)
                        print(f"üì¶ {self.address[:4]}...{self.address[-4:]} –ø–∞—É–∑–∞ {pause_time:.0f}—Å")
                        time.sleep(pause_time)
        else:
            print(f"‚ùå {self.address[:4]}...{self.address[-4:]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –¥–µ–ø–ª–æ—è")
            print(f"üí° {self.address[:4]}...{self.address[-4:]} –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã: https://zan.top/faucet/jovay")
            print(f"üí° {self.address[:4]}...{self.address[-4:]} –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ñ–∞—É—á–µ—Ç–∞")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        final_balances = self.get_balances()
        
        print(f"üèÅ {self.address[:4]}...{self.address[-4:]} –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"   üí∞ Sepolia: {balances['sepolia']:.6f} ‚Üí {final_balances['sepolia']:.6f}")
        print(f"   üí∞ Jovay: {balances['jovay']:.6f} ‚Üí {final_balances['jovay']:.6f}")
        print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–∏: üíß{self.stats['faucet']} üåâ{self.stats['bridges']} üì¶{self.stats['contracts']} ‚ùå{self.stats['errors']}")
        
        return self.stats


class MultiAccountManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self, config: Config):
        self.config = config
        self.load_accounts()

    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
        with open("private_keys.txt", 'r', encoding='utf-8') as f:
            self.private_keys = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        # API –∫–ª—é—á–∏
        try:
            with open("api_keys.txt", 'r', encoding='utf-8') as f:
                self.api_keys = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except:
            self.api_keys = []
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º API –∫–ª—é—á–∏ –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ
        default_api = "9d9d6aa530b64877be75a16288a7eadb"
        while len(self.api_keys) < len(self.private_keys):
            self.api_keys.append(default_api)
        
        # –ü—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        try:
            with open("proxy_assignments.txt", 'r', encoding='utf-8') as f:
                self.proxy_assignments = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except:
            self.proxy_assignments = []
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        while len(self.proxy_assignments) < len(self.private_keys):
            self.proxy_assignments.append("0")
        
        # –ü—Ä–æ–∫—Å–∏
        try:
            with open("proxies.txt", 'r', encoding='utf-8') as f:
                self.proxies = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        except:
            self.proxies = []

    def get_proxy_for_account(self, account_index: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_index >= len(self.proxy_assignments):
            return None
        
        if self.proxy_assignments[account_index] == "1" and self.proxies:
            return self.proxies[account_index % len(self.proxies)]
        
        return None

    def process_account(self, account_index: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            private_key = self.private_keys[account_index]
            api_key = self.api_keys[account_index]
            proxy = self.get_proxy_for_account(account_index)
            
            automation = JovayAutomation(private_key, api_key, proxy)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            if account_index > 0:
                pause = random.uniform(*self.config.pause_between_accounts)
                print(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {pause:.0f}—Å")
                time.sleep(pause)
            
            return automation.run_automation(self.config)
            
        except Exception as e:
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_index + 1}: –æ—à–∏–±–∫–∞ {type(e).__name__} - {str(e)[:50]}")
            return {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 1}

    def run_sequential(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        print(f"\nüîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú")
        print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.private_keys)}")
        print("=" * 40)
        
        total_stats = {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 0}
        
        for i in range(len(self.private_keys)):
            print(f"\nüë§ –ê–ö–ö–ê–£–ù–¢ {i + 1}/{len(self.private_keys)}")
            stats = self.process_account(i)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for key in total_stats:
                total_stats[key] += stats[key]
        
        self._print_final_stats(total_stats)

    def run_multi_threaded(self):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        print(f"\n‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú")
        print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.private_keys)}")
        print(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {self.config.max_threads}")
        print("=" * 40)
        
        total_stats = {'faucet': 0, 'bridges': 0, 'contracts': 0, 'errors': 0}
        
        with ThreadPoolExecutor(max_workers=self.config.max_threads) as executor:
            futures = []
            for i in range(len(self.private_keys)):
                future = executor.submit(self.process_account, i)
                futures.append(future)
            
            completed = 0
            for future in as_completed(futures):
                try:
                    stats = future.result()
                    completed += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    for key in total_stats:
                        total_stats[key] += stats[key]
                    
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}/{len(self.private_keys)}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")
                    completed += 1
        
        self._print_final_stats(total_stats)

    def _print_final_stats(self, stats):
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 30)
        print(f"üíß –§–∞—É—á–µ—Ç: {stats['faucet']}")
        print(f"üåâ –ë—Ä–∏–¥–∂–∏: {stats['bridges']}")
        print(f"üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {stats['contracts']}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {stats['errors']}")
        
        total_operations = stats['faucet'] + stats['bridges'] + stats['contracts']
        if total_operations > 0:
            success_rate = ((total_operations - stats['errors']) / total_operations) * 100
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if stats['contracts'] > 0:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: https://scan.jovay.io")


def create_example_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    files_to_create = {
        "private_keys.txt": [
            "# –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ—à–µ–ª—å–∫–æ–≤",
            "# –ö–∞–∂–¥—ã–π –∫–ª—é—á —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            "# 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
            ""
        ],
        "api_keys.txt": [
            "# API –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞",
            "# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt",
            "# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://zan.top",
            "9d9d6aa530b64877be75a16288a7eadb",
            ""
        ],
        "proxy_assignments.txt": [
            "# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞", 
            "# 1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏, 0 = –±–µ–∑ –ø—Ä–æ–∫—Å–∏",
            "# –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å private_keys.txt",
            "0",
            ""
        ],
        "proxies.txt": [
            "# –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã",
            "# –§–æ—Ä–º–∞—Ç: ip:port:user:pass –∏–ª–∏ ip:port",
            "# 192.168.1.1:8080",
            ""
        ]
    }
    
    for filename, content in files_to_create.items():
        if not os.path.exists(filename):
            with open(filename, 'w', encoding='utf-8') as f:
                f.write('\n'.join(content))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    create_example_files()
    
    # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config = Config(
        max_threads=2,
        bridge_count=1,  # –í–ö–õ–Æ–ß–ï–ù —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
        deploy_count=3,
        bridge_amount_min=0.001,
        bridge_amount_max=0.005
    )
    
    manager = MultiAccountManager(config)
    
    if not manager.private_keys:
        print("‚ùå –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ private_keys.txt")
        return
    
    print(f"\nüöÄ JOVAY NETWORK AUTOMATION")
    print("=" * 40)
    print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(manager.private_keys)}")
    print(f"üîë API –∫–ª—é—á–µ–π: {len(manager.api_keys)}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {len(manager.proxies)}")
    
    print(f"\nüìã –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê:")
    print("1. üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")
    print("2. ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    
    choice = input("\n–í—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        manager.run_sequential()
    elif choice == "2":
        manager.run_multi_threaded()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()